# components are reusable
components:
  # schemas can be defined and re-used
  schemas:
    Book:
      type: object
      required:
        - title
        - author
      properties:
        id:
          type: string
          description: The id of the Book
        title:
          type: string
          description: The title of the Book
        author:
          type: string
          description: the author of the Book
      example:
        id: 99
        title: A Random Book Title
        author: Firstname LastName
  # parameters can be defined and re-used
  parameters:
    BookId:
      in: path
      name: id
      schema:
        type: string
      required: true
      description: The Book id
tags:
  - name: Books
    description: Everything related to Books
# provide all the api paths
paths:
  # specify the route
  /books:
    # define the method
    get:
      # provide a summary
      summary: Get a list of all Books
      # group similar requests with tags
      tags:
        - Books
      # list the responses
      responses:
        # provide the http status code
        "200":
          # provide a description
          description: We receive a list of all the Books
          # if it returns a response body then define that
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "500":
          description: Server Error
    # another method on the same route
    post:
      summary: Create a new Book
      tags:
        - Books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "200":
          description: The Book was successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "500":
          description: Server Error
  # a second route
  "/books/{id}":
    get:
      summary: Get a specific Book by id
      tags:
        - Books
      parameters:
        - $ref: "#/components/parameters/BookId"
      responses:
        "200":
          description: We recieve a Book by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "404":
          description: The Book with that specific id was not found
        "500":
          description: Server Error
    put:
      summary: Update a specific Book by id
      tags:
        - Books
      parameters:
        - $ref: "#/components/parameters/BookId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "200":
          description: The Book was successfully Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: The Request Body did not include all required fields
    delete:
      summary: Delete a specific Book by id
      tags:
        - Books
      parameters:
        - $ref: "#/components/parameters/BookId"
      responses:
        "200":
          description: The Book was successfully Deleted
        "404":
          description: The Book with that specific id was not found
        "500":
          description: Server Error
